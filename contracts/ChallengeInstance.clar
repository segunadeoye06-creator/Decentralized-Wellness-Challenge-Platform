(define-constant ERR-NOT-AUTHORIZED u100)
(define-constant ERR-INVALID-GOAL u101)
(define-constant ERR-INVALID-DURATION u102)
(define-constant ERR-INVALID-MIN-CONTRIB u103)
(define-constant ERR-CHALLENGE-NOT-ACTIVE u104)
(define-constant ERR-CHALLENGE-ENDED u105)
(define-constant ERR-ALREADY-JOINED u106)
(define-constant ERR-NOT-JOINED u107)
(define-constant ERR-INVALID-PROGRESS u108)
(define-constant ERR-INVALID-ORACLE u109)
(define-constant ERR-INVALID-REWARD-SPLIT u110)
(define-constant ERR-INSUFFICIENT-CONTRIB u111)
(define-constant ERR-MAX-PARTICIPANTS-EXCEEDED u112)
(define-constant ERR-INVALID-START-TIME u113)
(define-constant ERR-INVALID-END-TIME u114)
(define-constant ERR-REWARD-ALREADY-CLAIMED u115)
(define-constant ERR-NO-REWARDS-AVAILABLE u116)
(define-constant ERR-INVALID-CHALLENGE-TYPE u117)
(define-constant ERR-INVALID-PENALTY-RATE u118)
(define-constant ERR-INVALID-VOTING-THRESHOLD u119)
(define-constant ERR-INVALID-LOCATION u120)
(define-constant ERR-INVALID-CURRENCY u121)
(define-constant ERR-INVALID-STATUS u122)
(define-constant ERR-MAX-CHALLENGES-EXCEEDED u123)
(define-constant ERR-INVALID-UPDATE-PARAM u124)

(define-data-var challenge-id uint u0)
(define-data-var goal uint u0)
(define-data-var duration uint u0)
(define-data-var min-contribution uint u0)
(define-data-var max-participants uint u50)
(define-data-var is-active bool true)
(define-data-var start-time uint u0)
(define-data-var end-time uint u0)
(define-data-var creator principal tx-sender)
(define-data-var challenge-type (string-utf8 50) u"")
(define-data-var penalty-rate uint u0)
(define-data-var voting-threshold uint u0)
(define-data-var location (string-utf8 100) u"")
(define-data-var currency (string-utf8 20) u"STX")
(define-data-var status bool true)
(define-data-var oracle-principal (optional principal) none)

(define-map participants principal { contribution: uint, progress: uint, completed: bool, claimed: bool })
(define-map progress-submissions principal uint)
(define-map votes principal bool)

(define-read-only (get-challenge-details)
  (ok {
    id: (var-get challenge-id),
    goal: (var-get goal),
    duration: (var-get duration),
    min-contribution: (var-get min-contribution),
    max-participants: (var-get max-participants),
    is-active: (var-get is-active),
    start-time: (var-get start-time),
    end-time: (var-get end-time),
    creator: (var-get creator),
    challenge-type: (var-get challenge-type),
    penalty-rate: (var-get penalty-rate),
    voting-threshold: (var-get voting-threshold),
    location: (var-get location),
    currency: (var-get currency),
    status: (var-get status)
  })
)

(define-read-only (get-participant (user principal))
  (map-get? participants user)
)

(define-read-only (is-participant (user principal))
  (is-some (map-get? participants user))
)

(define-private (validate-goal (g uint))
  (if (> g u0)
    (ok true)
    (err ERR-INVALID-GOAL))
)

(define-private (validate-duration (d uint))
  (if (> d u0)
    (ok true)
    (err ERR-INVALID-DURATION))
)

(define-private (validate-min-contribution (m uint))
  (if (> m u0)
    (ok true)
    (err ERR-INVALID-MIN-CONTRIB))
)

(define-private (validate-max-participants (mp uint))
  (if (and (> mp u0) (<= mp u100))
    (ok true)
    (err ERR-MAX-PARTICIPANTS-EXCEEDED))
)

(define-private (validate-challenge-type (ct (string-utf8 50)))
  (if (or (is-eq ct u"fitness") (is-eq ct u"meditation") (is-eq ct u"reading"))
    (ok true)
    (err ERR-INVALID-CHALLENGE-TYPE))
)

(define-private (validate-penalty-rate (pr uint))
  (if (<= pr u100)
    (ok true)
    (err ERR-INVALID-PENALTY-RATE))
)

(define-private (validate-voting-threshold (vt uint))
  (if (and (> vt u0) (<= vt u100))
    (ok true)
    (err ERR-INVALID-VOTING-THRESHOLD))
)

(define-private (validate-location (loc (string-utf8 100)))
  (if (and (> (len loc) u0) (<= (len loc) u100))
    (ok true)
    (err ERR-INVALID-LOCATION))
)

(define-private (validate-currency (cur (string-utf8 20)))
  (if (or (is-eq cur u"STX") (is-eq cur u"BTC"))
    (ok true)
    (err ERR-INVALID-CURRENCY))
)

(define-public (initialize 
  (id uint) 
  (challenge-goal uint) 
  (challenge-duration uint) 
  (min-contrib uint) 
  (max-parts uint) 
  (ctype (string-utf8 50)) 
  (prate uint) 
  (vthresh uint) 
  (loc (string-utf8 100)) 
  (cur (string-utf8 20)))
  (begin
    (asserts! (is-eq tx-sender (var-get creator)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-goal challenge-goal))
    (try! (validate-duration challenge-duration))
    (try! (validate-min-contribution min-contrib))
    (try! (validate-max-participants max-parts))
    (try! (validate-challenge-type ctype))
    (try! (validate-penalty-rate prate))
    (try! (validate-voting-threshold vthresh))
    (try! (validate-location loc))
    (try! (validate-currency cur))
    (var-set challenge-id id)
    (var-set goal challenge-goal)
    (var-set duration challenge-duration)
    (var-set min-contribution min-contrib)
    (var-set max-participants max-parts)
    (var-set start-time block-height)
    (var-set end-time (+ block-height challenge-duration))
    (var-set challenge-type ctype)
    (var-set penalty-rate prate)
    (var-set voting-threshold vthresh)
    (var-set location loc)
    (var-set currency cur)
    (ok true)
  )
)

(define-public (join-challenge (contribution uint))
  (begin
    (asserts! (var-get is-active) (err ERR-CHALLENGE-NOT-ACTIVE))
    (asserts! (< block-height (var-get end-time)) (err ERR-CHALLENGE-ENDED))
    (asserts! (is-none (map-get? participants tx-sender)) (err ERR-ALREADY-JOINED))
    (asserts! (>= contribution (var-get min-contribution)) (err ERR-INSUFFICIENT-CONTRIB))
    (asserts! (< (len (map-keys participants)) (var-get max-participants)) (err ERR-MAX-PARTICIPANTS-EXCEEDED))
    (try! (contract-call? .RewardPool deposit contribution (var-get challenge-id)))
    (map-set participants tx-sender { contribution: contribution, progress: u0, completed: false, claimed: false })
    (ok true)
  )
)

(define-public (submit-progress (progress-value uint))
  (let ((participant (unwrap! (map-get? participants tx-sender) (err ERR-NOT-JOINED))))
    (asserts! (var-get is-active) (err ERR-CHALLENGE-NOT-ACTIVE))
    (asserts! (< block-height (var-get end-time)) (err ERR-CHALLENGE-ENDED))
    (asserts! (>= progress-value (get progress participant)) (err ERR-INVALID-PROGRESS))
    (try! (contract-call? .ProgressOracle verify-progress progress-value tx-sender (var-get challenge-id)))
    (map-set participants tx-sender (merge participant { progress: progress-value }))
    (if (>= progress-value (var-get goal))
      (map-set participants tx-sender (merge participant { completed: true }))
      false)
    (ok true)
  )
)

(define-public (end-challenge)
  (begin
    (asserts! (is-eq tx-sender (var-get creator)) (err ERR-NOT-AUTHORIZED))
    (asserts! (>= block-height (var-get end-time)) (err ERR-INVALID-END-TIME))
    (var-set is-active false)
    (var-set status false)
    (try! (contract-call? .RewardDistributor prepare-distribution (var-get challenge-id)))
    (ok true)
  )
)

(define-public (claim-reward)
  (let ((participant (unwrap! (map-get? participants tx-sender) (err ERR-NOT-JOINED))))
    (asserts! (not (var-get is-active)) (err ERR_CHALLENGE_NOT_ACTIVE))
    (asserts! (get completed participant) (err ERR_INVALID_STATUS))
    (asserts! (not (get claimed participant)) (err ERR-REWARD_ALREADY_CLAIMED))
    (let ((reward (try! (contract-call? .RewardDistributor calculate-reward tx-sender (var-get challenge-id)))))
      (asserts! (> reward u0) (err ERR_NO_REWARDS_AVAILABLE))
      (try! (contract-call? .RewardPool withdraw reward tx-sender (var-get challenge-id)))
      (map-set participants tx-sender (merge participant { claimed: true }))
      (ok reward)
    )
  )
)

(define-public (vote-on-extension (vote bool))
  (begin
    (asserts! (is-some (map-get? participants tx-sender)) (err ERR-NOT-JOINED))
    (asserts! (var-get is-active) (err ERR_CHALLENGE_NOT_ACTIVE))
    (map-set votes tx-sender vote)
    (ok true)
  )
)

(define-public (apply-penalty (user principal))
  (let ((participant (unwrap! (map-get? participants user) (err ERR_NOT-JOINED))))
    (asserts! (is-eq tx-sender (var-get creator)) (err ERR-NOT-AUTHORIZED))
    (asserts! (not (get completed participant)) (err ERR_INVALID_STATUS))
    (let ((penalty (/ (* (get contribution participant) (var-get penalty-rate)) u100)))
      (try! (contract-call? .RewardPool apply-penalty penalty user (var-get challenge-id)))
      (ok penalty)
    )
  )
)

(define-public (set-oracle (oracle principal))
  (begin
    (asserts! (is-eq tx-sender (var-get creator)) (err ERR-NOT-AUTHORIZED))
    (var-set oracle-principal (some oracle))
    (ok true)
  )
)